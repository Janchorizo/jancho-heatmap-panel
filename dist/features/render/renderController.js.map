{"version":3,"sources":["../../../src/features/render/renderController.ts"],"names":["MetricsPanelCtrl","TimeSeries","_","d3","renderDefaults","renderEditor","Feature","$scope","panelController","ctrl","hola","panel","defaults","cloneDeep","events","on","onInitEditMode","bind","onPanelInitialized","onRender","addEditorTab","renderSala","panelDivId","data","actualizarColores","cargarPlano","render","baseMapRoute","mapRoute","discrete_continuous","scaleColor","value","thresholds","colors","scaleLinear","domain","range","console","log","target","dir","xml","mimeType","get","error","div","document","getElementById","removeChild","childNodes","appendChild","documentElement","t","transition","duration","ease","easeLinear","select","selectAll","elementIdentifyer","style","unknownDataColor","salas","d","metric","id","$","proxy"],"mappings":"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","file":"renderController.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport _ from 'lodash';\nimport * as d3 from '../../libs/d3/build/d3.js' ;\n\nimport { renderDefaults } from \"./renderDefaults.js\";\nimport { renderEditor } from \"./renderEditor.js\";\n\n/**\n * @alias renderFeature\n * @classdesc <h2>render feature</h2>\n * Implementación de una funcionalidad\n * Mediante el patrón mediador, se suscribe a los eventos del plugin a través\n * de la referencia al $scope que se le pasa.\n * <br>\n * <br><h3>Funcionalidad</h3>\n * Implementa toda la representación visual del panel. Tanto la carga del SVG,\n * como la actualización del mismo a partir de los datos del plugin.<br>\n * <br><h3>Eventos suscritos</h3>\n * <ul>\n *  <li>init-edit-mode</li>\n *  <li>panel-initialized</li>\n *  <li>render</li>\n * </ul>\n * @requires D3.js\n */\nexport default class Feature{\n  /**\n   * constructor - description\n   *\n   * @param  {type} $scope Es el contexto del plugin que se pasa para poder suscribirse\n   * a los eventos.\n   * @return {type}        Nueva instancia de un Feature\n   */\n  constructor( $scope){\n      this.$scope = $scope;\n      this.panelController = $scope.ctrl;\n      this.panelController.hola();\n      this.panel = this.panelController.panel;\n\n      const defaults = _.cloneDeep(renderDefaults)\n      _.defaults( this.panelController.panel, defaults);\n\n      this.panelController.events.on( 'init-edit-mode', this.onInitEditMode.bind(this));\n      //this.panelController.events.on( 'data-received', this.onDataReceived);\n      this.panelController.events.on( 'panel-initialized', this.onPanelInitialized.bind(this));\n      this.panelController.events.on( 'render', this.onRender.bind(this));\n      //this.panelController.events.on( 'refresh', this.onRefresh);\n  }\n\n  /**\n   * onInitEditMode - Handler para el evento de init-edit-mode\n   *\n   * @memberof renderFeature\n   */\n  onInitEditMode(){\n    this.panelController.addEditorTab( 'Render', renderEditor( this.$scope), 2);\n  }\n\n  /**\n   * onRender - Handler para el evento de render\n   *\n   * @memberof renderFeature\n   */\n  onRender(){\n    this.renderSala( '#'+this.panel.panelDivId, this.panel.data);\n  }\n\n  /**\n   * onPanelInitialized - Handler para el evento panel-initialized\n   *\n   * @memberof renderFeature\n   */\n  onPanelInitialized(){\n    this.actualizarColores();\n    this.cargarPlano( this.panel.panelDivId, this.panel.render.baseMapRoute + this.panel.render.mapRoute);\n    this.panelController.render();\n  }\n\n  /**\n   * actualizarColores - Cambio de la función proporcionada para la escala de color <br><br>\n   * Para la representación de valores discretos se construye una función ad-hoc.<br>\n   * Para la representación de valores contínua se obtiene una escala de la librería D3.js.\n   *\n   * @memberof renderFeature\n   */\n  actualizarColores(){\n    this.panelController.hola();\n    if(this.panel.render.discrete_continuous == true){\n      this.scaleColor = (function( value){\n        if( value <= this.panel.render.thresholds[0]){\n          return( this.panel.render.colors[0]);\n        }else if( value <= this.panel.render.thresholds[1]){\n          return( this.panel.render.colors[1]);\n        }else{\n          return( this.panel.render.colors[2]);\n        }\n      });\n    }else{\n      this.scaleColor =  d3.scaleLinear()\n        .domain( this.panel.render.domain)\n        .range( this.panel.render.colors);\n    }\n    console.log(this.panel);\n  }\n\n  /**\n   * cargarPlano - Carga el plano svg en el elemento indicado\n   *\n   * @param  {type} target Id del elemento div en el que cargar el plano\n   * @param  {type} dir    Dirección al fichero SVG\n   * @memberof renderFeature\n   */\n  cargarPlano( target, dir){\n    // target => class name\n    d3.xml( dir).mimeType( \"image/svg+xml\").get( function( error, xml){\n      if( error){ throw( error);}\n      let div = document.getElementById(target);\n      if(div != null){\n        div.removeChild(div.childNodes[0]);\n        div.appendChild(xml.documentElement);\n      }\n    });\n  }\n\n  /**\n   * renderSala - Actualiza los colores de la figura SVG <br>\n   * El color aplicado a cada sala lo proporciona la función scaleColor, que se suministra\n   * mediante inyección de dependencias, y se actualiza en\n   *\n   * @param  {type} target Elemento del DOM del que cuelga el elemento svg\n   * @param  {type} data   TimeSeries del que obtener los valores para el mapa de calor\n   * @memberof renderFeature\n   */\n  renderSala (target, data){\n    var t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\n    //ClearOutput\n    var t = d3.select(target+' svg').selectAll( '.'+this.panel.render.elementIdentifyer).style( 'fill', this.panel.render.unknownDataColor);\n\n    //Binding\n    var salas = d3.select(target+' svg').selectAll( '.'+this.panel.render.elementIdentifyer)\n      .data(data, function(d){ return d ? d.metric : this.id; });\n\n    //Update\n    salas\n      .transition(t)\n      .style('fill', $.proxy( function(d){ return this.scaleColor( d.value)}, this));\n  }\n}\n"]}