{"version":3,"sources":["../src/heatmapCtrl.js"],"names":["MetricsPanelCtrl","_","panelDefaults","RenderFeature","PanelActionsFeature","DataProcessingFeature","HeatmapController","$scope","$injector","defaults","cloneDeep","panel","defaultsDeep","panelDivId","$id","console","info","dataProcessingFeature","panelActionsFeature","renderFeature","refresh","render","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AAEEC,mB,oBAAAA,a;;AAEFC,mB;;AACAC,yB;;AACAC,2B;;;mCAmBMC,iB;;;AAET;;;;;;;;;AASA,mCAAaC,MAAb,EAAqBC,SAArB,EAA+B;AAAA;;AAAA,4IACpBD,MADoB,EACZC,SADY;;AAE3B,cAAMC,WAAWR,EAAES,SAAF,CAAYR,aAAZ,CAAjB;AACA,gBAAKS,KAAL,GAAaV,EAAEW,YAAF,CAAgB,MAAKD,KAArB,EAA4BF,QAA5B,CAAb;AACA,gBAAKE,KAAL,CAAWE,UAAX,GAAwB,aAAW,MAAKN,MAAL,CAAYO,GAA/C;;AAEAC,kBAAQC,IAAR,CAAa,8BAAb;AACA,gBAAKC,qBAAL,GAA6B,IAAIZ,qBAAJ,CAA2B,MAAKE,MAAhC,CAA7B;AACA,gBAAKW,mBAAL,GAA2B,IAAId,mBAAJ,CAAyB,MAAKG,MAA9B,CAA3B;AACA,gBAAKY,aAAL,GAAqB,IAAIhB,aAAJ,CAAmB,MAAKI,MAAxB,CAArB;;AAEA,gBAAKa,OAAL;AACA,gBAAKC,MAAL;AAZ2B;AAa9B;;;QAxBkCrB,gB;;;;AA2BvCM,wBAAkBgB,WAAlB,GAAgC,sBAAhC","file":"heatmapCtrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nimport { panelDefaults } from './panelDefaults.js';\n\nimport RenderFeature from './features/render/renderController.js';\nimport PanelActionsFeature from './features/panelActions/panelActionsController.js';\nimport DataProcessingFeature from './features/dataProcessing/dataProcessingController.js'\n\n\n/**\n * HeatmapController - Clase HeatmapController\n * <br>\n * Implementa el patr√≥n de cadena de responsabilidades, y como mediador para\n * los eventos del plugin. <br><br>\n *\n * A cada instancia de nueva funcionalidad, se le pasa el $scope e $injector,\n * para poder suscribirse a los eventos que recibe el plugin.\n * El plugin no implementa funcionalidad, ni control. Cada instancia de nueva\n * funcionalidad es responsable de implementar aquello que requiera.\n * <br><br>\n * Actualmente se instancian :\n * - dataProcessing\n * - render\n * - panelActions\n */\nexport class HeatmapController extends MetricsPanelCtrl{\n\n    /**\n     * constructor - Constructor para HeatmapController\n     * <br>\n     * Instancia cada una de las funcionalidades registradas.\n     *\n     * @param  {type} $scope    description\n     * @param  {type} $injector description\n     * @return {type}           New panel plugin controller\n     */\n    constructor( $scope, $injector){\n        super( $scope, $injector);\n        const defaults = _.cloneDeep(panelDefaults);\n        this.panel = _.defaultsDeep( this.panel, defaults);\n        this.panel.panelDivId = 'heatmap-'+this.$scope.$id;\n\n        console.info('Loading Features for v1.0...');\n        this.dataProcessingFeature = new DataProcessingFeature( this.$scope);\n        this.panelActionsFeature = new PanelActionsFeature( this.$scope);\n        this.renderFeature = new RenderFeature( this.$scope);\n\n        this.refresh();\n        this.render();\n    }\n}\n\nHeatmapController.templateUrl = 'partials/module.html';\n"]}