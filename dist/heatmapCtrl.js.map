{"version":3,"sources":["../src/heatmapCtrl.js"],"names":["MetricsPanelCtrl","TimeSeries","_","d3","panelDefaults","renderFeature","HeatmapController","$scope","$injector","defaults","panel","thresholds","events","on","onInitEditMode","bind","onDataReceived","onPanelInitialized","onRender","onRefresh","dataList","index","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,4B,kBAAAA,gB;;AACDC,sB;;AACAC,a;;AACKC,c;;AAEHC,yB,oBAAAA,a;;AAEFC,yB;;;;;;;;;;;;;;;;;;;;;yCAEMC,iB;;;AACT,2CAAaC,MAAb,EAAqBC,SAArB,EAA+B;AAAA;;AAAA,sJACpBD,MADoB,EACZC,SADY;;AAE3BN,sBAAEO,QAAF,CAAY,MAAKC,KAAjB,EAAwBN,aAAxB;AACA,0BAAKM,KAAL,CAAWC,UAAX,GAAwBP,cAAcO,UAAtC;;AAEA,0BAAKC,MAAL,CAAYC,EAAZ,CAAgB,gBAAhB,EAAkC,MAAKC,cAAL,CAAoBC,IAApB,OAAlC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAgB,eAAhB,EAAiC,MAAKG,cAAL,CAAoBD,IAApB,OAAjC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAgB,mBAAhB,EAAqC,MAAKI,kBAAL,CAAwBF,IAAxB,OAArC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAgB,QAAhB,EAA0B,MAAKK,QAAL,CAAcH,IAAd,OAA1B;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAgB,SAAhB,EAA2B,MAAKM,SAAL,CAAeJ,IAAf,OAA3B;;AAEA,0BAAKV,aAAL,GAAqB,IAAIA,aAAJ,CAAmB,MAAKE,MAAxB,CAArB;AAX2B;AAY9B;;AAED;;;;;yDACoB,CAEnB;;;qDAEe,CACf;;;mDAEea,Q,EAAS,CACxB;;;+CAES,CAET;;;gDACU,CACV;;;kDAEcC,K,EAAM,CAEpB;;;;cAlCkCrB,gB;;;;AAsCvCM,8BAAkBgB,WAAlB,GAAgC,sBAAhC","file":"heatmapCtrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport _ from 'lodash';\nimport * as d3 from './libs/d3/build/d3.js' ;\n\nimport { panelDefaults } from \"./panelDefaults.js\";\n\nimport renderFeature from './features/render/renderController.js';\n\nexport class HeatmapController extends MetricsPanelCtrl{\n    constructor( $scope, $injector){\n        super( $scope, $injector);\n        _.defaults( this.panel, panelDefaults);\n        this.panel.thresholds = panelDefaults.thresholds;\n\n        this.events.on( 'init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on( 'data-received', this.onDataReceived.bind(this));\n        this.events.on( 'panel-initialized', this.onPanelInitialized.bind(this));\n        this.events.on( 'render', this.onRender.bind(this));\n        this.events.on( 'refresh', this.onRefresh.bind(this));\n\n        this.renderFeature = new renderFeature( this.$scope);\n    }\n\n    // Grafana event controllers\n    onPanelInitialized(){\n\n    }\n\n    onInitEditMode(){\n    }\n\n    onDataReceived( dataList){\n    }\n\n    onRender(){\n\n    }\n    onRefresh(){\n    }\n\n    onColorChange( index){\n\n    }\n\n}\n\nHeatmapController.templateUrl = 'partials/module.html';\n"]}