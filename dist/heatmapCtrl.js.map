{"version":3,"sources":["../src/heatmapCtrl.js"],"names":["MetricsPanelCtrl","_","panelDefaults","RenderFeature","PanelActionsFeature","DataProcessingFeature","HeatmapController","$scope","$injector","defaults","cloneDeep","panel","defaultsDeep","panelDivId","$id","dataProcessingFeature","panelActionsFeature","renderFeature","refresh","render","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AAEEC,mB,oBAAAA,a;;AAEFC,mB;;AACAC,yB;;AACAC,2B;;;mCAsBMC,iB;;;AAET;;;;;;;;;AASA,mCAAaC,MAAb,EAAqBC,SAArB,EAA+B;AAAA;;AAAA,4IACpBD,MADoB,EACZC,SADY;;AAE3B,cAAMC,WAAWR,EAAES,SAAF,CAAYR,aAAZ,CAAjB;AACA,gBAAKS,KAAL,GAAaV,EAAEW,YAAF,CAAgB,MAAKD,KAArB,EAA4BF,QAA5B,CAAb;AACA,gBAAKE,KAAL,CAAWE,UAAX,GAAwB,aAAW,MAAKN,MAAL,CAAYO,GAA/C;;AAEA,gBAAKC,qBAAL,GAA6B,IAAIV,qBAAJ,CAA2B,MAAKE,MAAhC,CAA7B;AACA,gBAAKS,mBAAL,GAA2B,IAAIZ,mBAAJ,CAAyB,MAAKG,MAA9B,CAA3B;AACA,gBAAKU,aAAL,GAAqB,IAAId,aAAJ,CAAmB,MAAKI,MAAxB,CAArB;;AAEA,gBAAKW,OAAL;AACA,gBAAKC,MAAL;AAX2B;AAY9B;;;QAvBkCnB,gB;;;;AA0BvCM,wBAAkBc,WAAlB,GAAgC,sBAAhC","file":"heatmapCtrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nimport { panelDefaults } from './panelDefaults.js';\n\nimport RenderFeature from './features/render/renderController.js';\nimport PanelActionsFeature from './features/panelActions/panelActionsController.js';\nimport DataProcessingFeature from './features/dataProcessing/dataProcessingController.js'\n\n\n/**\n * HeatmapController - Class HeatmapController\n * <br>\n * Implements the responsabilities pattern, and acts as mediator for the plugin's\n * events. <br><br>\n * The $scope and $injector of this parent class is passed to each new instance\n * of a feature to make it posible for the feature to subscribe to Grafana events.\n * <br><br>\n * The class does not implement any kind of functionality, nor control. Each new\n * instance of a feature is responsible of implementing any of it, and should not\n * make assumptions about the existance of other plugins; otherwise should be\n * specified. <br><br>\n * Actually, the following features: <br>\n * <ul>\n *  <li>dataProcessing</li>\n *  <li>render</li>\n *  <li>panelActions</li>\n * </ul>\n */\nexport class HeatmapController extends MetricsPanelCtrl{\n\n    /**\n     * constructor - Constructor for HeatmapController\n     * <br>\n     * Instances each one of the registered features.\n     *\n     * @param  {type} $scope    description\n     * @param  {type} $injector description\n     * @return {type}           New panel plugin controller\n     */\n    constructor( $scope, $injector){\n        super( $scope, $injector);\n        const defaults = _.cloneDeep(panelDefaults);\n        this.panel = _.defaultsDeep( this.panel, defaults);\n        this.panel.panelDivId = 'heatmap-'+this.$scope.$id;\n\n        this.dataProcessingFeature = new DataProcessingFeature( this.$scope);\n        this.panelActionsFeature = new PanelActionsFeature( this.$scope);\n        this.renderFeature = new RenderFeature( this.$scope);\n\n        this.refresh();\n        this.render();\n    }\n}\n\nHeatmapController.templateUrl = 'partials/module.html';\n"]}